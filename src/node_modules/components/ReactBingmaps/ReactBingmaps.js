import React, { Component } from 'react';
import classSet from 'classnames';
import PropTypes from 'prop-types';
import './ReactBingmaps.css';

class ReactBingmaps extends Component {
	constructor(props) {
		super(props);
		this.initializeReactBingmaps=this.initializeReactBingmaps.bind(this);	
	}
	componentDidMount(){	
		window.initializeReactBingmaps = function(){			
			this.initializeReactBingmaps()
		}.bind(this)
		this.loadScript("https://www.bing.com/api/maps/mapcontrol?callback=initializeReactBingmaps");
	}
	initializeReactBingmaps(){		
		const Microsoft = window.Microsoft;
		const { 
			bingmapKey, 
			center, 
			mapTypeId,
			zoom,
			navigationBarMode,
			supportedMapTypes,
			heading
		} = this.props;

		let isBirdEyeAvailable = false;
		if(mapTypeId === "birdseye" && center && center[0] && center[1]){
			let location = new Microsoft.Maps.Location(center[0], center[1]);
			Microsoft.Maps.getIsBirdseyeAvailable(location, Microsoft.Maps.Heading[heading], (onResponse => { isBirdEyeAvailable = onResponse; }));
		}

		if(bingmapKey){
			var map = new Microsoft.Maps.Map('.react-bingmaps', {
				credentials: bingmapKey,
				...((center && center[0] && center[1]) ? {center: new Microsoft.Maps.Location(center[0], center[1])} : {}),
	            ...((mapTypeId) ? {mapTypeId: isBirdEyeAvailable ? Microsoft.Maps.MapTypeId.birdseye : Microsoft.Maps.MapTypeId[mapTypeId]} : {}),
	            ...((zoom) ? {zoom: zoom} : {}),
	            ...((navigationBarMode) ? {navigationBarMode: Microsoft.Maps.NavigationBarMode[navigationBarMode]} : {}),
	            ...((supportedMapTypes) ? {supportedMapTypes: supportedMapTypes.map((id) => Microsoft.Maps.MapTypeId[id])} : {})

			});
			console.log(map);
		}
	}
	loadScript(url){
	    var script = document.createElement("script")
	    script.type = "text/javascript";
	    script.async = true;
	    script.defer = true;	    
	    script.src = url;
	    document.getElementsByTagName("head")[0].appendChild(script);
	}
	componentWillReceiveProps(nextProps){

	}
	componentDidUpdate(){

	}
	componentWillUnmount() {
		
	}
	render() {
		return(
				<div className = { classSet('react-bingmaps', this.props.className) }>
				</div>
			);
	}
}

export default ReactBingmaps;

ReactBingmaps.propTypes = {
	bingmapKey: PropTypes.oneOfType([ PropTypes.string, PropTypes.number ]),
	center: PropTypes.arrayOf(PropTypes.number),
	mapTypeId: PropTypes.string,
	navigationBarMode: PropTypes.string,
	supportedMapTypes: PropTypes.arrayOf(PropTypes.string),
	heading: PropTypes.oneOfType([ PropTypes.string, PropTypes.number ]),
}
ReactBingmaps.defaultProps = {
	bingmapKey: undefined,
	center: undefined,
	mapTypeId: undefined,
	navigationBarMode: undefined,
	supportedMapTypes: undefined,
	heading: 0
}